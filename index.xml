<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Miles Lucas</title><link>/</link><description>Recent content on Miles Lucas</description><generator>Hugo</generator><language>en</language><copyright>&amp;copy; 2021 &lt;a href="https://mileslucas.com/">Miles Lucas&lt;/a></copyright><lastBuildDate>Thu, 22 Apr 2021 00:00:50 -0500</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Regex for Astronomical Angles</title><link>/posts/regex-angles/</link><pubDate>Thu, 22 Apr 2021 00:00:50 -0500</pubDate><guid>/posts/regex-angles/</guid><description>Today I dug a little deeper than I expected into some regex parsing for the AstroAngles.jl package. I wanted to detail the way I approached the problem and the solution I landed on (in hopes that someone will come along and tell me how much better it could have been).
Sexagisimal and Angles In astronomy, we represent the coordinates of things on the sky using angles. This is convenient because we can essentially look at the sky as a big sphere with us at the middle and form a coordinate system similar to our latitude and longitude system.</description></item><item><title/><link>/projects/</link><pubDate>Mon, 19 Apr 2021 02:15:11 -0500</pubDate><guid>/projects/</guid><description>Projects I am a fairly active open-source developer on GitHub. Most of my projects are related to astronomy in some way and I typically code in Julia and Python. Below are some projects I feel like highlighting.
JuliaHCI JuliaHCI is a group of Julia packages for high-contrast imaging (HCI). ADI.jl was inspired by the vortex imaging pipeline (VIP) and contains algorithms and metrics used for removing speckles in angular differential imaging (ADI). Firefly.jl is still experimental, but will contain statistical models for exoplanets for use with ADI.</description></item><item><title>Developing a Single-Pass Weighted LogSumExp Function</title><link>/posts/weighted-logsumexp/</link><pubDate>Mon, 19 Apr 2021 00:06:19 -0500</pubDate><guid>/posts/weighted-logsumexp/</guid><description>Recently I&amp;rsquo;ve been thinking about the LogSumExp trick since it is used in the integration step of nested sampling. I won&amp;rsquo;t go over too much of the math here, but the reason this trick exists is to greatly increase the numerical stability of the operation
$$ \log \sum_i \exp x_i $$
via the identity
$$ a + \log \sum_i \exp\left(x_i - a\right) $$
Naive implementations In Julia we can implement a naive logsumexp with
logsumexp_naive(X) = log(sum(exp, X)) let&amp;rsquo;s test the numerical accuracy against Julia&amp;rsquo;s BigFloat for some very large numbers</description></item></channel></rss>